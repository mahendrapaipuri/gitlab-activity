image: python:3.12-bullseye

stages:
  - pretest
  - build
  - test
  - deploy
  - release

# Create an anchor to setup node
.setup_node:
  before_script:
    - pip install -U pip
    # Install nodejs
    - wget https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-x64.tar.xz
    - tar -xvf node-v18.12.1-linux-x64.tar.xz
    - mv node-v18.12.1-linux-x64 /root/nodejs
    - rm -rf node-v18.12.1-linux-x64.tar.xz
    - export PATH=/root/nodejs/bin:$PATH
    - npm --version

pre-commit:
  stage: pretest
  script:
    - mkdir -p build/reports
    - pip install pre-commit
    - pre-commit install
    - pre-commit run --all-files
  artifacts:
    paths:
      - build/reports/
    expire_in: 1 day

build-test:
  stage: build
  script:
    - pip install .
  artifacts:
    paths:
      - build/reports/
    expire_in: 1 day

build-doc:
  stage: build
  extends: .setup_node
  script:
    - pip install git+https://github.com/pypa/hatch
    - hatch run docs:build
  artifacts:
    paths:
      - build/reports/
    expire_in: 1 day

tests:
  stage: test
  parallel:
    matrix:
      - PYVER: ["3.8", "3.9", "3.10", "3.11", "3.12"]
  script:
    # Install hatch first. Install it from Git until
    # a release with [PR#1002](https://github.com/pypa/hatch/pull/1002)
    # is made
    - pip install git+https://github.com/pypa/hatch
    # Checks the current python version
    - hatch run +py=$PYVER test:check
    # Runs tests
    - hatch run +py=$PYVER test:test
    # Codecov specific stuff
    - curl -Os https://uploader.codecov.io/latest/linux/codecov
    - chmod +x codecov
    # Seems like we need to add HTTP Proxy explicitly
    # Add coverage report only for one version
    # We could not make flags work for some reason. Lets try to do it in future
    - if [ $PYVER == "3.12" ]; then ./codecov -t $CODECOV_TOKEN -U $HTTPS_PROXY; fi
  after_script:
    - cp coverage.xml build/reports/
  coverage: '/TOTAL\s+\d+\s+\d+\s+\d+\s+\d+\s+(\d+)%/'
  artifacts:
    paths:
      - build/reports/
    expire_in: 1 day

# Generate docs
pages:
  stage: deploy
  extends: .setup_node
  script:
    - pip install git+https://github.com/pypa/hatch
    - hatch run docs:build
    - mv docs/website/build/ public/
  artifacts:
    paths:
      - public
  only:
    - main

# Prepare release by tagging and adding entry to changelog
prepare_release:
  stage: release
  when: manual
  variables:
    VERSION: minor
    BRANCH: main
  before_script:
    - echo "Preparing release..."
    # Install hatch and install package
    - pip install git+https://github.com/pypa/hatch
    - pip install -e '.[dev]'
  script:
    - hatch version ${VERSION}
    # Get new version
    - export NEXT_VERSION_SPECIFIER=$(hatch version)
    # Generate changelog
    - gitlab-activity --append -o CHANGELOG.md
    - cat CHANGELOG.md
    - git add CHANGELOG.md gitlab_activity/_version.py
    # Configure mail and name of the user who should be visible in the commit history
    - git config --global user.email 'release-bot@gitlab.com'
    - git config --global user.name 'Release Bot'
    - git commit -m 'Bump version and update CHANGELOG.md'
    # Create new tag
    - git tag ${NEXT_VERSION_SPECIFIER} -m "Release ${NEXT_VERSION_SPECIFIER}"
    # Set remote push URL and push to originating branch
    - git remote set-url --push origin "https://${GITLAB_CI_USER}:${GITLAB_CI_TOKEN}@${CI_REPOSITORY_URL#*@}"
    - git push origin HEAD:${CI_COMMIT_REF_NAME} -o ci.skip # Pushes to the same branch as the trigger
    - git push origin ${NEXT_VERSION_SPECIFIER} # Pushes the tag BUT triggers the CI to run tagged jobs
  after_script:
    - echo "Version bumped and Changelog entry added"
  # Only run on main branch and do not run on tags
  # Because we create tag in this job
  only:
    - main
  except:
    - tags

# Create a new release on GitLab UI
release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Running release job"
  release:
    name: "Release File $CI_COMMIT_TAG"
    description: "Created using the GitLab's release-cli"
    tag_name: $CI_COMMIT_TAG
    ref: $CI_COMMIT_TAG
  only:
    - tags

# Publish the release to PyPI
# This job first publishes to test server and then publish to
# PyPI server upstream
publish:
  stage: release
  needs:
    - release
  before_script:
    - echo "Preparing publish job..."
    # Install prerequisites
    - python3 -m pip install pipx
    - python3 -m pipx ensurepath
    # distutils has been removed in Python 3.12 and pypiserver needs distutils
    # So we install setuptools https://docs.python.org/3.12/whatsnew/3.12.html
    - python3 -m pip install setuptools pypiserver
  script:
    # Build package
    - pipx run build --outdir dist .
    # Check dist files
    - pipx run twine check dist/*
    # Start a test pypi server
    - mkdir -p test_registry
    - pypi-server run -p 8081  -P . -a . -o  -v test_registry &
    # Sleep for a while for server to start
    - sleep 30
    # Upload package to test
    - pipx run twine upload --repository-url=http://0.0.0.0:8081 --user=foo --password=bar dist/*
    # Now if everything went well till this point, publish to PyPI
    - pipx run twine upload --user=${TWINE_USERNAME} --password=${TWINE_PASSWORD} dist/*
  after_script:
    - echo "Published to PyPI"
  only:
    - tags
