image: python:3.12-bullseye

stages:
  - pretest
  - build
  - test
  - deploy
  - release

# Create an anchor to setup node
.setup_node:
  before_script:
    - pip install -U pip
    # Install nodejs
    - wget https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-x64.tar.xz
    - tar -xvf node-v18.12.1-linux-x64.tar.xz
    - mv node-v18.12.1-linux-x64 /root/nodejs
    - rm -rf node-v18.12.1-linux-x64.tar.xz
    - export PATH=/root/nodejs/bin:$PATH
    - npm --version

pre-commit:
  stage: pretest
  script:
    - mkdir -p build/reports
    - pip install pre-commit
    - pre-commit install
    - pre-commit run --all-files
  artifacts:
    paths:
      - build/reports/
    expire_in: 1 day

# build-test:
#   stage: build
#   script:
#     - pip install .
#   artifacts:
#     paths:
#       - build/reports/
#     expire_in: 1 day

# build-doc:
#   stage: build
#   extends: .setup_node
#   script:
#     - pip install git+https://github.com/pypa/hatch
#     - hatch run docs:build
#   artifacts:
#     paths:
#       - build/reports/
#     expire_in: 1 day

# tests:
#   stage: test
#   parallel:
#     matrix:
#       - PYVER: ["3.8", "3.9", "3.10", "3.11", "3.12"]
#   script:
#     # Install hatch first. Install it from Git until
#     # a release with [PR#1002](https://github.com/pypa/hatch/pull/1002)
#     # is made
#     - pip install git+https://github.com/pypa/hatch
#     # Checks the current python version
#     - hatch run +py=$PYVER test:check
#     # Runs tests
#     - hatch run +py=$PYVER test:test
#     # Codecov specific stuff
#     - curl -Os https://uploader.codecov.io/latest/linux/codecov
#     - chmod +x codecov
#     # Seems like we need to add HTTP Proxy explicitly
#     # Add coverage report for each test separtely to codecov
#     - ./codecov -t $CODECOV_TOKEN -U $HTTPS_PROXY -F py$PYVER
#   coverage: '/TOTAL\s+\d+\s+\d+\s+\d+\s+\d+\s+(\d+)%/'
#   artifacts:
#     paths:
#       - build/reports/
#     expire_in: 1 day

# Generate docs
pages:
  stage: deploy
  extends: .setup_node
  script:
    - pip install git+https://github.com/pypa/hatch
    - hatch run docs:build
    - mv docs/website/build/ public/
  artifacts:
    paths:
      - public
  only:
    - main

# Release
release_job:
  stage: deploy
  # rules:
  #   - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  #     when: manual
  #     allow_failure: true
  when: manual
  variables:
    VERSION: minor
    BRANCH: main
  script:
    # Install hatch
    - pip install git+https://github.com/pypa/hatch
    - pip install -e .
    - echo "Hello"
    # Bump version
    - hatch version ${VERSION}
    # Get new version
    - export NEXT_VERSION_SPECIFIER=$(hatch version)
    # Generate changelog
    - gitlab-activity --append -o CHANGELOG.md
    - cat CHANGELOG.md
    - git add CHANGELOG.md gitlab_activity/_version.py
    - git commit -m '[skip-ci] Auto-update version and CHANGELOG.md'
    # Create new tag
    - git tag ${NEXT_VERSION_SPECIFIER} -m "Release ${NEXT_VERSION_SPECIFIER}"
    # Set remote push URL and push to originating branch
    # - git remote set-url --push origin "https://${GITLAB_CI_USER}:${GITLAB_CI_TOKEN}@${CI_REPOSITORY_URL#*@}"
    # - git push origin HEAD:$CI_COMMIT_REF_NAME  # Pushes to the same branch as the trigger
  # only:
  #   - main
